/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package BoardService.model.impl;

import BoardService.model.ADDFILE;
import BoardService.model.ADDFILEModel;
import BoardService.model.ADDFILESoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ADDFILE service. Represents a row in the &quot;HHL_PROJECT_ADDFILE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ADDFILEModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ADDFILEImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ADDFILEImpl
 * @generated
 */
@JSON(strict = true)
public class ADDFILEModelImpl
	extends BaseModelImpl<ADDFILE> implements ADDFILEModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a addfile model instance should use the <code>ADDFILE</code> interface instead.
	 */
	public static final String TABLE_NAME = "HHL_PROJECT_ADDFILE";

	public static final Object[][] TABLE_COLUMNS = {
		{"fno", Types.BIGINT}, {"bno", Types.BIGINT}, {"fName", Types.VARCHAR},
		{"fPath", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fno", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bno", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fPath", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HHL_PROJECT_ADDFILE (fno LONG not null primary key,bno LONG,fName VARCHAR(75) null,fPath TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table HHL_PROJECT_ADDFILE";

	public static final String ORDER_BY_JPQL = " ORDER BY addfile.fno ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HHL_PROJECT_ADDFILE.fno ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long BNO_COLUMN_BITMASK = 1L;

	public static final long FNO_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ADDFILE toModel(ADDFILESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ADDFILE model = new ADDFILEImpl();

		model.setFno(soapModel.getFno());
		model.setBno(soapModel.getBno());
		model.setFName(soapModel.getFName());
		model.setFPath(soapModel.getFPath());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ADDFILE> toModels(ADDFILESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ADDFILE> models = new ArrayList<ADDFILE>(soapModels.length);

		for (ADDFILESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ADDFILEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ADDFILE.class;
	}

	@Override
	public String getModelClassName() {
		return ADDFILE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ADDFILE, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ADDFILE, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ADDFILE, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ADDFILE)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ADDFILE, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ADDFILE, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ADDFILE)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ADDFILE, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ADDFILE, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ADDFILE>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ADDFILE.class.getClassLoader(), ADDFILE.class, ModelWrapper.class);

		try {
			Constructor<ADDFILE> constructor =
				(Constructor<ADDFILE>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ADDFILE, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ADDFILE, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ADDFILE, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ADDFILE, Object>>();
		Map<String, BiConsumer<ADDFILE, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ADDFILE, ?>>();

		attributeGetterFunctions.put("fno", ADDFILE::getFno);
		attributeSetterBiConsumers.put(
			"fno", (BiConsumer<ADDFILE, Long>)ADDFILE::setFno);
		attributeGetterFunctions.put("bno", ADDFILE::getBno);
		attributeSetterBiConsumers.put(
			"bno", (BiConsumer<ADDFILE, Long>)ADDFILE::setBno);
		attributeGetterFunctions.put("fName", ADDFILE::getFName);
		attributeSetterBiConsumers.put(
			"fName", (BiConsumer<ADDFILE, String>)ADDFILE::setFName);
		attributeGetterFunctions.put("fPath", ADDFILE::getFPath);
		attributeSetterBiConsumers.put(
			"fPath", (BiConsumer<ADDFILE, String>)ADDFILE::setFPath);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFno() {
		return _fno;
	}

	@Override
	public void setFno(long fno) {
		_fno = fno;
	}

	@JSON
	@Override
	public long getBno() {
		return _bno;
	}

	@Override
	public void setBno(long bno) {
		_columnBitmask |= BNO_COLUMN_BITMASK;

		if (!_setOriginalBno) {
			_setOriginalBno = true;

			_originalBno = _bno;
		}

		_bno = bno;
	}

	public long getOriginalBno() {
		return _originalBno;
	}

	@JSON
	@Override
	public String getFName() {
		if (_fName == null) {
			return "";
		}
		else {
			return _fName;
		}
	}

	@Override
	public void setFName(String fName) {
		_fName = fName;
	}

	@JSON
	@Override
	public String getFPath() {
		if (_fPath == null) {
			return "";
		}
		else {
			return _fPath;
		}
	}

	@Override
	public void setFPath(String fPath) {
		_fPath = fPath;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ADDFILE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ADDFILE toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ADDFILE>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ADDFILEImpl addfileImpl = new ADDFILEImpl();

		addfileImpl.setFno(getFno());
		addfileImpl.setBno(getBno());
		addfileImpl.setFName(getFName());
		addfileImpl.setFPath(getFPath());

		addfileImpl.resetOriginalValues();

		return addfileImpl;
	}

	@Override
	public int compareTo(ADDFILE addfile) {
		long primaryKey = addfile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ADDFILE)) {
			return false;
		}

		ADDFILE addfile = (ADDFILE)object;

		long primaryKey = addfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalBno = _bno;

		_setOriginalBno = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ADDFILE> toCacheModel() {
		ADDFILECacheModel addfileCacheModel = new ADDFILECacheModel();

		addfileCacheModel.fno = getFno();

		addfileCacheModel.bno = getBno();

		addfileCacheModel.fName = getFName();

		String fName = addfileCacheModel.fName;

		if ((fName != null) && (fName.length() == 0)) {
			addfileCacheModel.fName = null;
		}

		addfileCacheModel.fPath = getFPath();

		String fPath = addfileCacheModel.fPath;

		if ((fPath != null) && (fPath.length() == 0)) {
			addfileCacheModel.fPath = null;
		}

		return addfileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ADDFILE, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ADDFILE, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ADDFILE, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ADDFILE)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ADDFILE, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ADDFILE, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ADDFILE, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ADDFILE)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ADDFILE>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _fno;
	private long _bno;
	private long _originalBno;
	private boolean _setOriginalBno;
	private String _fName;
	private String _fPath;
	private long _columnBitmask;
	private ADDFILE _escapedModel;

}